%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Do not edit the TeX file your work
% will be overwritten.  Edit the RnW
% file instead.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

<<setup, include=FALSE, cache=FALSE>>=
knitr_debug <- FALSE # Set to true to see error output
library(tidyverse)
library(infer)
library(latex2exp)

setwd(file.path(
        "/home/rgiordan/Documents/git_repos/Presentations",
        "/DavisInterview_20211213/cis"))
set.seed(123)
@

<<load_data, include=FALSE>>=
source("load_data.R")

# Set some figure defaults.
# opts_chunk$set(fig.width=4.9, fig.height=3)
knitr_debug <- FALSE
opts_chunk$set(fig.pos='!h', fig.align='center', dev='png', dpi=300)
opts_chunk$set(echo=knitr_debug, message=knitr_debug, warning=knitr_debug)

# Width in rendered units.  High numbers give smaller fonts on the images.
# Setting base_image_width to the actual width of a page of paper (8.5)
# lets ggplot pick what it thinks is best.
base_aspect_ratio <- 4 / 8.5 # Basically fill a page by default
base_image_width <- 7.5
#base_image_width <- 7

SetImageSize <- function(
    aspect_ratio=base_aspect_ratio, image_width=base_image_width) {
  # Set the size on the page
  ow <- "0.98\\linewidth"
  oh <- sprintf("%0.3f\\linewidth", aspect_ratio * 0.98)

  # Set the size in rendering
  fw <- image_width
  fh <- image_width * aspect_ratio

  opts_chunk$set(out.width=ow,
                 out.height=oh,
                 fig.width=fw,
                 fig.height=fh)
}

SetImageSize()
@

%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%
% Plots

\newcommand{\BaseHistogram}{
<<base-hist, fig.show='hold'>>=
ggplot(estimates) +
    geom_histogram(
        aes(x=mu_hat), fill="dodgerblue3", color="lightgrey", bins=30) +
    geom_vline(aes(xintercept=mu)) +
    ylab("Count") +
    xlab(TeX("Estimated Price per night (Canadian dollars): $\\hat{\\mu}$"))
    #xlab(TeX("Estimated Price per night (Canadian dollars):"))
@
}


\newcommand{\BaseHistogramWithArrow}{
<<base-hist-arrow, fig.show='hold'>>=
ggplot(estimates) +
    geom_histogram(
        aes(x=mu_hat), fill="dodgerblue3", color="lightgrey", bins=30) +
    geom_vline(aes(xintercept=mu)) +
    ylab("Count") +
    xlab(TeX("Estimated Price per night (Canadian dollars): $\\hat{\\mu}$")) +
    PlotAxisArrow(mu_hat, height=500)
@
}



\newcommand{\BaseHistogramFaded}{
<<base-hist-faded, fig.show='hold'>>=
ggplot(estimates) +
    geom_histogram(
        aes(x=mu_hat), fill="dodgerblue3", color="lightgrey", bins=30,
        alpha=0.1) +
    geom_vline(aes(xintercept=mu), alpha=0.1) +
    ylab("Count") +
    xlab(TeX("Estimated Price per night (Canadian dollars): $\\hat{\\mu}$")) +
    PlotAxisArrow(mu_hat, height=500)
@
}


\newcommand{\SingleCI}{
<<base-hist-ci, fig.show='hold'>>=
ggplot(estimates) +
    geom_histogram(aes(x=mu_hat), fill="dodgerblue3", color="lightgrey", bins=30) +
    geom_vline(aes(xintercept=mu)) +
    ylab("Count") +
    xlab(TeX("Estimated Price per night (Canadian dollars): $\\hat{\\mu}$")) +
    PlotAxisArrow(mu_hat_lower, height=500) +
    PlotAxisArrow(mu_hat_upper, height=500) +
    geom_segment(
        aes(x=mu_lower, xend = mu_upper, y=height, yend=height, group=replicate),
        arrow=arrow(ends = "both", angle = 90, length = unit(.2,"cm")),
        size=3,
        data=data.frame(
            mu_lower=mu_hat_lower,
            mu_upper=mu_hat_upper,
            replicate=0,
            height=500))

@
}




\newcommand{\MultipleCIs}{

<<base-hist-cis-size, include=FALSE>>=
SetImageSize(aspect_ratio=base_aspect_ratio)
@

<<base-hist-cis, fig.show='hold'>>=
height_per_replicate <- 50
ggplot(estimates) +
    geom_histogram(
        aes(x=mu_hat), fill="dodgerblue3", color="lightgrey", bins=30, alpha=0.4) +
    geom_vline(aes(xintercept=mu)) +
    ylab("Count") +
    xlab("Price per night (Canadian dollars)") +
    geom_segment(
        aes(x=mu_lower, xend = mu_upper,
            y=height_per_replicate * replicate,
            yend=height_per_replicate * replicate,
            group=replicate, color=covers),
             arrow=arrow(ends = "both", angle = 90, length = unit(.2,"cm")),
             data=segments %>% filter(replicate < 30)) +
    scale_color_manual(name="Contains the truth:", values=c("black", "red"), breaks=c(TRUE, FALSE))

@
}
