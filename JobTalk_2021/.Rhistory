x_sub <- x_mat[abs(weights) > 1e-6, ]
return(as.numeric(rankMatrix(x_sub)))
} else {
return(ncol(x_mat))
}
}
ncol(x_mat)
ranks <- map_depth(signals, 2, GetXRank)
print(ranks)
#reruns <- RerunForSignals(signals, model_grads) # This will fail
preds <- PredictForSignals(signals, model_grads)
NewRerunFun <- function(weights) {
parks_df_sub <- parks_df[abs(weights) > 1e-6, ]
model <- lm(data=parks_df_sub, formula=reg_form)
return(model)
}
reruns <- RerunForSignals(signals, model_grads, RerunFun=NewRerunFun)
debug(NewRerunFun)
reruns <- RerunForSignals(signals, model_grads, RerunFun=NewRerunFun)
weights
nrow(x_mat)
nrow(parks_df)
View(parks_df)
lm
model.matrix
?model.matrix
x_sub <- model_grads$model_fit$fit_object$x[keep_rows, , drop=FALSE]
keep_rows <- abs(weights) > 1e-6
foo <- matrix(runif(6), 3, 2)
foo
foo[1, ]
foo[1, , drop=F]
NewRerunFun <- function(weights) {
keep_rows <- abs(weights) > 1e-6
x_sub <- model_grads$model_fit$fit_object$x[keep_rows, , drop=FALSE]
y_sub <- model_grads$model_fit$fit_object$y[keep_rows]
return(solve(t(x_sub) %*% x_sub, t(x_sub) %*% y))
}
reruns <- RerunForSignals(signals, model_grads, RerunFun=NewRerunFun)
NewRerunFun <- function(weights) {
keep_rows <- abs(weights) > 1e-6
x_sub <- model_grads$model_fit$fit_object$x[keep_rows, , drop=FALSE]
y_sub <- model_grads$model_fit$fit_object$y[keep_rows]
return(solve(t(x_sub) %*% x_sub, t(x_sub) %*% y_sub))
}
reruns <- RerunForSignals(signals, model_grads, RerunFun=NewRerunFun)
get_valid_rows(reg_form, parks_df)
require(linear.tools)
rownames(model$x)
rownames(parks_df)
parks_df_valid <- parks_df[rownames(model$x), ]
stopifnot(nrow(parks_df_valid) == nrow(model$x))
parks_df_valid$park_benches
parks_df_valid$park_benches - model$y
stopifnot(max(abs(parks_df_valid$park_benches - model$y)) < 1e-12)
NewRerunFun <- function(weights) {
keep_rows <- abs(weights) > 1e-6
parks_df_sub <- parks_df_valid[keep_rows, ]
model_sub <- lm(data=parks_df, formula=reg_form, x=TRUE, y=TRUE)
return(model_sub)
}
reruns <- RerunForSignals(signals, model_grads, RerunFun=NewRerunFun)
reruns
reruns <- RerunForSignals(signals, model_grads, RerunFun=NewRerunFun)
reruns_df <- GetSignalsAndRerunsDataframe(signals, reruns, model_grads)
preds_df <- GetSignalsAndRerunsDataframe(signals, preds, model_grads)
summary_df <-
rbind(reruns_df %>% mutate(method="rerun"),
preds_df %>% mutate(method="prediction")) %>%
pivot_wider(-method, names_from=method, values_from=value)
ggplot(summary_df) +
geom_point(aes(x=prediction, y=rerun, color=param_name, shape=metric)) +
geom_abline(aes(slope=1, intercept=0))
PredictForSignals
model_grads$RerunFun()
model_grads$RerunFun
orig_model_fit <- model_grads$model_fit
weights <- GetWeightVector(
drop_inds = signal$apip$inds,
orig_weights = model_grads$model_fit$weights)
weights
keep_rows <- abs(weights) > 1e-6
parks_df_sub <- parks_df_valid[keep_rows, ]
model_sub <- lm(data=parks_df, formula=reg_form, x=TRUE, y=TRUE)
model_sub$coefficients
param_sub <- model_sub$coefficients[orig_model_fit$parameter_names]
param_sub
length(orig_model_fit$parameter_names)
length(model_sub$coefficients)
# Use this script to debug and edit the knit graphs without re-compiling in latex.
#base_dir <- "/home/rgiordan/Documents/git_repos/AdversarialInfluenceWorkbench"
base_dir <- "/home/rgiordan/Documents/git_repos/Presentations"
paper_directory <- file.path(base_dir, "JobTalk_2021")
knitr_debug <- FALSE # Set to true to see error output
cash_cache <- FALSE
ohie_cache <- FALSE
microcredit_cache <- FALSE
setwd(paper_directory)
source(file.path(paper_directory, "figures_knitr/initialize.R"))
source(file.path(paper_directory, "figures_knitr/load_data.R"))
source(file.path(paper_directory,
"figures_knitr/microcredit/refit_line.R"),
echo=knitr_debug, print.eval=TRUE)
grid.arrange(plot1, plot2, ncol=2)
print(plot2)
source(file.path(paper_directory,
"figures_knitr/microcredit/refit_line.R"),
echo=knitr_debug, print.eval=TRUE)
print(plot2)
source(file.path(paper_directory,
"figures_knitr/microcredit/refit_line.R"),
echo=knitr_debug, print.eval=TRUE)
print(plot2)
source(file.path(paper_directory,
"figures_knitr/microcredit/refit_line.R"),
echo=knitr_debug, print.eval=TRUE)
print(plot2)
source(file.path(paper_directory,
"figures_knitr/microcredit/refit_line.R"),
echo=knitr_debug, print.eval=TRUE)
print(plot2)
source(file.path(paper_directory,
"figures_knitr/microcredit/refit_line.R"),
echo=knitr_debug, print.eval=TRUE)
print(plot2)
source(file.path(paper_directory,
"figures_knitr/microcredit/refit_line.R"),
echo=knitr_debug, print.eval=TRUE)
print(plot2)
source(file.path(paper_directory,
"figures_knitr/microcredit/refit_line.R"),
echo=knitr_debug, print.eval=TRUE)
print(plot2)
source(file.path(paper_directory,
"figures_knitr/microcredit/refit_line.R"),
echo=knitr_debug, print.eval=TRUE)
print(plot2)
source(file.path(paper_directory,
"figures_knitr/microcredit/refit_line.R"),
echo=knitr_debug, print.eval=TRUE)
print(plot2)
ohie_env$results_df
n_obs <- ohie_env$results_df$n_drop / ohie_env$results_df$prop_drop
n_obs
unique(n_obs)
source(file.path(paper_directory,
"figures_knitr/OHIE/OHIE-table_results.R"),
echo=knitr_debug, print.eval=TRUE)
table_df
n_obs <- table_df$n_drop / table_df$prop_drop
n_obs
length(unqiue(n_obs))
length(unique(n_obs))
stopifnot(length(unique(n_obs)) == 1)
n_obs <- as.integer(unique(n_obs))
n_obs
source(file.path(paper_directory,
"figures_knitr/OHIE/OHIE-table_results.R"),
echo=knitr_debug, print.eval=TRUE)
# proportion and number dropped.
n_obs <- table_df$n_drop / table_df$prop_drop
stopifnot(length(unique(n_obs)) == 1)
n_obs <- as.integer(unique(n_obs))
n_obs
source(file.path(paper_directory,
"figures_knitr/cash_transfers/cash_transfers_results_table.R"),
echo=knitr_debug, print.eval=TRUE)
# I didn't save the total number of observations so infer it from the
# proportion and number dropped.
n_obs <- table_df$n_drop / table_df$prop_drop
stopifnot(length(unique(n_obs)) == 1)
n_obs <- as.integer(unique(n_obs))
n_obs
#
source(file.path(paper_directory,
"figures_knitr/cash_transfers/cash_transfers_results_table.R"),
echo=knitr_debug, print.eval=TRUE)
n_obs
source(file.path(paper_directory,
"figures_knitr/microcredit/microcredit_profit_results_table.R"),
echo=knitr_debug, print.eval=TRUE)
source(file.path(paper_directory,
"figures_knitr/microcredit/microcredit_profit_results_table.R"),
echo=knitr_debug, print.eval=TRUE)
library(zaminfluence)
library(tidyverse)
# It should be enough to change this variable to point to your own installation.
base_dir <- "/home/rgiordan/Documents/git_repos/AdversarialInfluenceWorkbench"
#base_dir <- "/Users/rachaelmeager/AdversarialInfluenceWorkbench"
# you should change this too if you want to write
data_dir <- file.path(base_dir, "writing/output/applications_data/microcredit")
output_dir <- file.path(data_dir)
################
# Load the data
load(file.path(data_dir, "microcredit_profit_data.Rdata"))
# To prevent confusion epecially when rewriting later in the loop, give it a better name
full_profit_data <- data
rm(data)
N <- dim(full_profit_data)[1]
sites <- unique(full_profit_data$site)
K <- length(sites)
# Name the regression model.
reg_form <- formula("profit ~ treatment + 1")
# create storage
results_list <- list()
alpha <- 0.01  # For analysis_df
max_line_alpha <- 0.05
#i <- 1
for(i in 1:K) {
cat("i ", i, "\n")
data <- filter(full_profit_data, site == i) %>% mutate(row=1:n())
reg_fit <- lm(data = data, formula = reg_form, x=TRUE, y=TRUE)
# Get influence.
model_grads <-
ComputeModelInfluence(reg_fit) %>%
AppendTargetRegressorInfluence("treatment")
signals <- GetInferenceSignals(model_grads)
reruns <- RerunForSignals(signals, model_grads)
preds <- PredictForSignals(signals, model_grads)
rerun_df <-
GetSignalsAndRerunsDataframe(signals, reruns, model_grads) %>%
mutate(site=study_country[i])
preds_df <-
GetSignalsAndRerunsDataframe(signals, preds, model_grads) %>%
mutate(site=study_country[i])
base_df <-
GetModelFitInferenceDataframe(model_grads$model_fit, model_grads$param_infls) %>%
mutate(site=study_country[i])
n_obs <- nrow(data)
n_drop <- floor(alpha * n_obs)
qoi <- model_grads$param_infls$treatment[["param"]]
noise <- mean((n_obs * qoi$infl)^2)
amip_pos <- qoi$pos$infl_cumsum[n_drop]
amip_neg <- qoi$neg$infl_cumsum[n_drop]
analysis_df <- data.frame(
sd_profit=sd(data$profit),
site=study_country[i],
site_ind=i,
alpha=alpha,
n_obs=n_obs,
n_drop=n_drop,
noise=sqrt(noise),
reg_se=model_grads$param_infls$treatment[["se"]]$base_value,
amip_pos=amip_pos,
amip_neg=amip_neg,
betahat=qoi$base_value)
line_df <- data.frame()
max_n_drop <- ceiling(max_line_alpha * n_obs)
for (this_n_drop in 0:max_n_drop) {
if (this_n_drop > 0) {
w_drop <- GetWeightVector(drop_inds=qoi$neg$infl_inds[1:this_n_drop],
orig_weights=model_grads$model_fit$weights)
} else {
w_drop <- model_grads$model_fit$weights
}
sum(w_drop == 0)
model_grads$model_fit
model_refit <- model_grads$RerunFun(w_drop)
model_pred <- PredictModelFit(model_grads, w_drop)
line_df <- bind_rows(
line_df,
data.frame(site=study_country[i],
site_ind=i,
n_drop=this_n_drop,
prop_drop=this_n_drop / n_obs,
refit=model_refit$param[model_refit$parameter_names == "treatment"] - qoi$base_value,
pred=model_pred$param[model_pred$parameter_names == "treatment"] - qoi$base_value))
}
results_list[[i]] <- list(
rerun_df=rerun_df, preds_df=preds_df, base_df=base_df, reg_fit=reg_fit,
analysis_df=analysis_df, line_df=line_df)
}
line_df <-
bind_rows(map_df(results_list, ~ .$line_df)) %>%
mutate(error=refit - pred)
unique(line_df$site)
if (FALSE) {
line_df %>% filter(site == "Mexico") %>%
ggplot(aes(group=site, x=prop_drop)) +
geom_line(aes(y=refit, color="refit")) +
geom_line(aes(y=pred, color="pred")) +
facet_grid(site ~ ., scales="free")
}
analysis_df <-
bind_rows(map_df(results_list, ~ .$analysis_df)) %>%
mutate(
noise_se=noise / sqrt(n_obs),
shape_pos=abs(amip_pos) / noise,
shape_neg=abs(amip_neg) / noise,
#alpha_thresh=-0.5 + sqrt(0.25 + 1 / n_obs),
n_impl_pos=(1.96 / shape_pos)^2,
n_impl_neg=(1.96 / shape_neg)^2
) %>%
mutate(reg_lower=betahat - 1.96 * reg_se,
reg_upper=betahat + 1.96 * reg_se,
amip_lower=betahat + amip_neg,
amip_upper=betahat + amip_pos)
analysis_df %>% select(site, n_obs, n_drop, noise, reg_se, amip_pos, amip_neg)
analysis_df %>%
mutate(max_shape=sqrt(alpha * (1 - alpha)),
se_width=1.96 * reg_se,
amip_width=amip_pos - amip_neg) %>%
select(site,
max_shape, shape_pos, shape_neg,
n_obs, n_impl_pos, n_impl_neg,
se_width, amip_width,
reg_se, noise_se)
analysis_df %>%
select(site, sd_profit, reg_lower, reg_upper, amip_lower, amip_upper)
#i <- 1
for(i in 1:K) {
cat("i ", i, "\n")
data <- filter(full_profit_data, site == i) %>% mutate(row=1:n())
reg_fit <- lm(data = data, formula = reg_form, x=TRUE, y=TRUE)
# Get influence.
model_grads <-
ComputeModelInfluence(reg_fit) %>%
AppendTargetRegressorInfluence("treatment")
signals <- GetInferenceSignals(model_grads)
reruns <- RerunForSignals(signals, model_grads)
preds <- PredictForSignals(signals, model_grads)
rerun_df <-
GetSignalsAndRerunsDataframe(signals, reruns, model_grads) %>%
mutate(site=study_country[i])
preds_df <-
GetSignalsAndRerunsDataframe(signals, preds, model_grads) %>%
mutate(site=study_country[i])
base_df <-
GetModelFitInferenceDataframe(model_grads$model_fit, model_grads$param_infls) %>%
mutate(site=study_country[i])
n_obs <- nrow(data)
n_drop <- floor(alpha * n_obs)
qoi <- model_grads$param_infls$treatment[["param"]]
noise <- mean((n_obs * qoi$infl)^2)
amip_pos <- qoi$pos$infl_cumsum[n_drop]
amip_neg <- qoi$neg$infl_cumsum[n_drop]
analysis_df <- data.frame(
sd_profit=sd(data$profit),
site=study_country[i],
site_ind=i,
alpha=alpha,
n_obs=n_obs,
n_drop=n_drop,
noise=sqrt(noise),
reg_se=model_grads$param_infls$treatment[["se"]]$base_value,
amip_pos=amip_pos,
amip_neg=amip_neg,
betahat=qoi$base_value)
line_df <- data.frame()
max_n_drop <- ceiling(max_line_alpha * n_obs)
for (this_n_drop in 0:max_n_drop) {
if (this_n_drop > 0) {
w_drop <- GetWeightVector(drop_inds=qoi$neg$infl_inds[1:this_n_drop],
orig_weights=model_grads$model_fit$weights)
} else {
w_drop <- model_grads$model_fit$weights
}
sum(w_drop == 0)
model_grads$model_fit
model_refit <- model_grads$RerunFun(w_drop)
model_pred <- PredictModelFit(model_grads, w_drop)
line_df <- bind_rows(
line_df,
data.frame(site=study_country[i],
site_ind=i,
n_drop=this_n_drop,
prop_drop=this_n_drop / n_obs,
refit=model_refit$param[model_refit$parameter_names == "treatment"] - qoi$base_value,
pred=model_pred$param[model_pred$parameter_names == "treatment"] - qoi$base_value))
}
results_list[[i]] <- list(
rerun_df=rerun_df, preds_df=preds_df, base_df=base_df, reg_fit=reg_fit,
analysis_df=analysis_df, line_df=line_df,
infl=qoi$infl)
}
which(study_country == "Mexico")
infl_mx <- results_list[[which(study_country == "Mexico")]]$infl
infl_mx
hist(infl_mx)
hist(infl_mx, 100)
hist(infl_mx, 1000)
hist(infl_mx, 10000)
sd(infl_mx)
analysis_df
analysis_df
analysis_df %>% select(site, n_obs, n_drop, noise, reg_se, amip_pos, amip_neg)
analysis_df
#i <- 1
for(i in 1:K) {
cat("i ", i, "\n")
data <- filter(full_profit_data, site == i) %>% mutate(row=1:n())
reg_fit <- lm(data = data, formula = reg_form, x=TRUE, y=TRUE)
# Get influence.
model_grads <-
ComputeModelInfluence(reg_fit) %>%
AppendTargetRegressorInfluence("treatment")
signals <- GetInferenceSignals(model_grads)
reruns <- RerunForSignals(signals, model_grads)
preds <- PredictForSignals(signals, model_grads)
rerun_df <-
GetSignalsAndRerunsDataframe(signals, reruns, model_grads) %>%
mutate(site=study_country[i])
preds_df <-
GetSignalsAndRerunsDataframe(signals, preds, model_grads) %>%
mutate(site=study_country[i])
base_df <-
GetModelFitInferenceDataframe(model_grads$model_fit, model_grads$param_infls) %>%
mutate(site=study_country[i])
n_obs <- nrow(data)
n_drop <- floor(alpha * n_obs)
qoi <- model_grads$param_infls$treatment[["param"]]
noise <- mean((n_obs * qoi$infl)^2)
amip_pos <- qoi$pos$infl_cumsum[n_drop]
amip_neg <- qoi$neg$infl_cumsum[n_drop]
analysis_df <- data.frame(
sd_profit=sd(data$profit),
site=study_country[i],
site_ind=i,
alpha=alpha,
n_obs=n_obs,
n_drop=n_drop,
noise=sqrt(noise),
reg_se=model_grads$param_infls$treatment[["se"]]$base_value,
amip_pos=amip_pos,
amip_neg=amip_neg,
betahat=qoi$base_value)
line_df <- data.frame()
max_n_drop <- ceiling(max_line_alpha * n_obs)
for (this_n_drop in 0:max_n_drop) {
if (this_n_drop > 0) {
w_drop <- GetWeightVector(drop_inds=qoi$neg$infl_inds[1:this_n_drop],
orig_weights=model_grads$model_fit$weights)
} else {
w_drop <- model_grads$model_fit$weights
}
sum(w_drop == 0)
model_grads$model_fit
model_refit <- model_grads$RerunFun(w_drop)
model_pred <- PredictModelFit(model_grads, w_drop)
line_df <- bind_rows(
line_df,
data.frame(site=study_country[i],
site_ind=i,
n_drop=this_n_drop,
prop_drop=this_n_drop / n_obs,
refit=model_refit$param[model_refit$parameter_names == "treatment"] - qoi$base_value,
pred=model_pred$param[model_pred$parameter_names == "treatment"] - qoi$base_value))
}
results_list[[i]] <- list(
rerun_df=rerun_df, preds_df=preds_df, base_df=base_df, reg_fit=reg_fit,
analysis_df=analysis_df, line_df=line_df,
infl=qoi$infl)
}
infl_mx <- results_list[[which(study_country == "Mexico")]]$infl
line_df <-
bind_rows(map_df(results_list, ~ .$line_df)) %>%
mutate(error=refit - pred)
unique(line_df$site)
if (FALSE) {
line_df %>% filter(site == "Mexico") %>%
ggplot(aes(group=site, x=prop_drop)) +
geom_line(aes(y=refit, color="refit")) +
geom_line(aes(y=pred, color="pred")) +
facet_grid(site ~ ., scales="free")
}
analysis_df <-
bind_rows(map_df(results_list, ~ .$analysis_df)) %>%
mutate(
noise_se=noise / sqrt(n_obs),
shape_pos=abs(amip_pos) / noise,
shape_neg=abs(amip_neg) / noise,
#alpha_thresh=-0.5 + sqrt(0.25 + 1 / n_obs),
n_impl_pos=(1.96 / shape_pos)^2,
n_impl_neg=(1.96 / shape_neg)^2
) %>%
mutate(reg_lower=betahat - 1.96 * reg_se,
reg_upper=betahat + 1.96 * reg_se,
amip_lower=betahat + amip_neg,
amip_upper=betahat + amip_pos)
analysis_df %>% select(site, n_obs, n_drop, noise, reg_se, amip_pos, amip_neg)
analysis_df %>%
mutate(max_shape=sqrt(alpha * (1 - alpha)),
se_width=1.96 * reg_se,
amip_width=amip_pos - amip_neg) %>%
select(site,
max_shape, shape_pos, shape_neg,
n_obs, n_impl_pos, n_impl_neg,
se_width, amip_width,
reg_se, noise_se)
analysis_df %>%
select(site, sd_profit, reg_lower, reg_upper, amip_lower, amip_upper)
analysis_df %>% select(site, n_obs, n_drop, noise, reg_se, amip_pos, amip_neg)
analysis_df %>%
mutate(max_shape=sqrt(alpha * (1 - alpha)),
se_width=1.96 * reg_se,
amip_width=amip_pos - amip_neg) %>%
select(site,
max_shape, shape_pos, shape_neg,
n_obs, n_impl_pos, n_impl_neg,
se_width, amip_width,
reg_se, noise_se)
analysis_df
analysis_df %>%
select(site, noise, n_obs, betahat)
filter(microcredit_refit_env$analysis_df, site == "Mexico")
filter(microcredit_refit_env$analysis_df, site == "Mexico")$noise
mx_analysis_df <- filter(microcredit_refit_env$analysis_df, site == "Mexico")
stopifnot(nrow(mx_analysis_df) == 1)
DefineMacro("MxNoise", mx_analysis_df$noise, digits=0)
DefineMacro("MxBetahat", mx_analysis_df$betahat, digits=0)
DefineMacro("MxNobs", mx_analysis_df$n_obs, digits=0)
mx_analysis_df$n_obs
